import os
import glob
import random
import base64
import logging
from typing import List

# A helper classed used for training the zstandard lib pre made dictionary.
# This is only used for training the dictionary, so it's not used in the main code.
class ZStandardDictionary:

    _Instance:"ZStandardDictionary" = None #pyright: ignore[reportAssignmentType]

    # These are only used for dev building.
    _TrainingPath = "/home/pi/hw-zstandard-training-samples"
    _OutputDictFilePath = "/home/pi/hw-zstandard-gen-dict-base64.data"


    @staticmethod
    def Init(logger:logging.Logger):
        ZStandardDictionary._Instance = ZStandardDictionary(logger)


    @staticmethod
    def Get() -> "ZStandardDictionary":
        return ZStandardDictionary._Instance


    def __init__(self, logger:logging.Logger) -> None:
        self.Logger = logger
        self.TrainingDataNamePrefix:str = None #pyright: ignore[reportAttributeAccessIssue]

        # This will be None if we aren't using zstandard in this runtime.
        self.PreTrainedDict = None


    # The check for zstandard lib must be made before we can call this, but if we are using zstandard, we must load this dict.
    def InitPreComputedDict(self) -> None:
        # To make things easier, we include the dict in the source code as a based64 encoded string.
        # This prevents us from doing any kind of file IO or network calls to load the dict.
        dictData = base64.b64decode(ZStandardDictionary.c_Dict1)

        # We can input zlib, because this class is only inited when the compression class has already checked for zlib support.
        #pylint: disable=import-outside-toplevel,unused-import
        import zstandard as zstd

        # Load the dict from the data.
        localDict = zstd.ZstdCompressionDict(dictData, dict_type=zstd.DICT_TYPE_FULLDICT)

        # Doing pre-compute now makes it so we don't have to use compute the dict on first use.
        # We must specify a level, so we use the same level we use elsewhere, which is the default of 3.
        localDict.precompute_compress(level=3) #pyright: ignore[reportUnknownMemberType]

        # Success! We are using the pre-trained dict, so set it.
        self.PreTrainedDict = localDict
        self.Logger.info(f"ZStandard Dict Training loaded. Data Length:{len(self.PreTrainedDict.as_bytes())} DictID:{self.PreTrainedDict.dict_id()}")


    # DEV ONLY
    # Used only in dev builds to init training data samples.
    # You must also add SubmitData into the Compression class to get the samples submitted.
    def InitTrainingOutputDataFile(self, namePrefix:str) -> None:
        if input(f"Are you sure you want to add to the training data with prefix [{namePrefix}]? (y/n) ") != "y":
            return
        self.TrainingDataNamePrefix = namePrefix
        # Ensure the training path exists.
        if not os.path.exists(ZStandardDictionary._TrainingPath):
            os.makedirs(ZStandardDictionary._TrainingPath)


    # DEV ONLY
    # This should be called by everything that's compressing data to sample it.
    # The training data file should include as much data as we can from all platforms.
    # To start training, add this to the Compression.Compress and Compress.Decompress functions if we are using zstandard.
    def SubmitData(self, data:bytes) -> None:
        # Check state to see if we are training.
        if self.TrainingDataNamePrefix is None:
            self.Logger.warning("ZStandardDictionary.SubmitData was called but we aren't training!")
            return

        try:
            # Get a random file name.
            fileId = random.random() * 100000000
            fileName = f"{self.TrainingDataNamePrefix}-{fileId}.txt"
            self.Logger.info(f"Writing {len(data)} bytes to the training file: {fileName}")

            # Write the data.
            with open(os.path.join(ZStandardDictionary._TrainingPath, fileName), "w", encoding="utf-8") as f:
                f.write(data.decode("utf-8"))

        except Exception as e:
            self.Logger.error(f"ZStandardDictionary failed to write data to the file. Error: {e}")


    # Used by dev builds to build a new training dict.
    def BuildTrainingDict(self) -> None:
        try:
            #pylint: disable=import-outside-toplevel
            import zstandard as zstd

            # Train a new dict.
            # Collect all of the samples that are in the samples folder.
            inputSamples:List[bytes] = []
            searchStr = os.path.join(ZStandardDictionary._TrainingPath, "*")
            for file in glob.glob(searchStr):
                with open(file, "rb") as f:
                    inputSamples.append(f.read())

            # Options:
            #   - The dict size can be whatever we want it to be.
            #   - The dict_id is a built in id for the dict, we should rev it every time we update the dict.
            #   - Threads defines how many threads will be used when trying to optimize the function prams.
            #   - Steps defines how many steps we will take when optimize the function prams.
            self.Logger.info(f"ZStandard Dict starting training on {len(inputSamples)} samples.")
            dataDict = zstd.train_dictionary(dict_size=112640, samples=inputSamples, dict_id=1, threads=-1, steps=100) #pyright: ignore[reportArgumentType]

            # Done!
            # The k and d values are only used for the training process.
            self.Logger.info(f"ZStandard Dict Training done! Data Length:{len(dataDict.as_bytes())} K: {dataDict.k} D: {dataDict.d} DictID: {dataDict.dict_id()}")

            # Base64 encode the output
            if input("Do you want to replace the base64 encoded data file on disk? (y/n) ") == "y":
                with open(ZStandardDictionary._OutputDictFilePath, "wb") as f:
                    en = base64.b64encode(dataDict.as_bytes())
                    self.Logger.info(f"test {len(en)} {en}")
                    f.write(en)

        except Exception as e:
            self.Logger.error(f"ZStandardDictionary failed to BuildTrainingDict. Error: {e}")


    # This is the pre-made dict version 1.
    # This dict must match what's used in the service, see the service notes for more info.
    #pylint: disable=line-too-long
    c_Dict1 = ""
