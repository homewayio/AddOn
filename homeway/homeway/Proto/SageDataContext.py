# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Proto

import octoflatbuffers
from typing import Any
from typing import Optional
class SageDataContext(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = octoflatbuffers.encode.Get(octoflatbuffers.packer.uoffset, buf, offset)
        x = SageDataContext()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSageDataContext(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SageDataContext
    def Init(self, buf: bytes, pos: int):
        self._tab = octoflatbuffers.table.Table(buf, pos)

    # SageDataContext
    def DataType(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def SampleRate(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def Channels(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def BytesPerSample(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def LanguageCode(self) -> Optional[str]:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SageDataContext
    def HomeContext(self, j: int):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(octoflatbuffers.number_types.Uint8Flags, a + octoflatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SageDataContext
    def HomeContextAsNumpy(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(octoflatbuffers.number_types.Uint8Flags, o)
        return 0

    # SageDataContext
    def HomeContextAsByteArray(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsByteArray(o)
        return 0

    # SageDataContext
    def HomeContextLength(self) -> int:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SageDataContext
    def HomeContextIsNone(self) -> bool:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # SageDataContext
    def HomeContextCompression(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def HomeContextOriginalDataSize(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def States(self, j: int):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(octoflatbuffers.number_types.Uint8Flags, a + octoflatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SageDataContext
    def StatesAsNumpy(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(octoflatbuffers.number_types.Uint8Flags, o)
        return 0

    # SageDataContext
    def StatesAsByteArray(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsByteArray(o)
        return 0

    # SageDataContext
    def StatesLength(self) -> int:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SageDataContext
    def StatesIsNone(self) -> bool:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # SageDataContext
    def StatesCompression(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def StatesOriginalDataSize(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def LiveContext(self, j: int):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(octoflatbuffers.number_types.Uint8Flags, a + octoflatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SageDataContext
    def LiveContextAsNumpy(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(octoflatbuffers.number_types.Uint8Flags, o)
        return 0

    # SageDataContext
    def LiveContextAsByteArray(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsByteArray(o)
        return 0

    # SageDataContext
    def LiveContextLength(self) -> int:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SageDataContext
    def LiveContextIsNone(self) -> bool:
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # SageDataContext
    def LiveContextCompression(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # SageDataContext
    def LiveContextOriginalDataSize(self):
        o = octoflatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(octoflatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SageDataContextStart(builder: octoflatbuffers.Builder):
    builder.StartObject(14)

def Start(builder: octoflatbuffers.Builder):
    SageDataContextStart(builder)

def SageDataContextAddDataType(builder: octoflatbuffers.Builder, dataType: int):
    builder.PrependInt8Slot(0, dataType, 0)

def AddDataType(builder: octoflatbuffers.Builder, dataType: int):
    SageDataContextAddDataType(builder, dataType)

def SageDataContextAddSampleRate(builder: octoflatbuffers.Builder, sampleRate: int):
    builder.PrependUint32Slot(1, sampleRate, 0)

def AddSampleRate(builder: octoflatbuffers.Builder, sampleRate: int):
    SageDataContextAddSampleRate(builder, sampleRate)

def SageDataContextAddChannels(builder: octoflatbuffers.Builder, channels: int):
    builder.PrependInt8Slot(2, channels, 0)

def AddChannels(builder: octoflatbuffers.Builder, channels: int):
    SageDataContextAddChannels(builder, channels)

def SageDataContextAddBytesPerSample(builder: octoflatbuffers.Builder, bytesPerSample: int):
    builder.PrependInt8Slot(3, bytesPerSample, 0)

def AddBytesPerSample(builder: octoflatbuffers.Builder, bytesPerSample: int):
    SageDataContextAddBytesPerSample(builder, bytesPerSample)

def SageDataContextAddLanguageCode(builder: octoflatbuffers.Builder, languageCode: int):
    builder.PrependUOffsetTRelativeSlot(4, octoflatbuffers.number_types.UOffsetTFlags.py_type(languageCode), 0)

def AddLanguageCode(builder: octoflatbuffers.Builder, languageCode: int):
    SageDataContextAddLanguageCode(builder, languageCode)

def SageDataContextAddHomeContext(builder: octoflatbuffers.Builder, homeContext: int):
    builder.PrependUOffsetTRelativeSlot(5, octoflatbuffers.number_types.UOffsetTFlags.py_type(homeContext), 0)

def AddHomeContext(builder: octoflatbuffers.Builder, homeContext: int):
    SageDataContextAddHomeContext(builder, homeContext)

def SageDataContextStartHomeContextVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartHomeContextVector(builder, numElems: int) -> int:
    return SageDataContextStartHomeContextVector(builder, numElems)

def SageDataContextAddHomeContextCompression(builder: octoflatbuffers.Builder, homeContextCompression: int):
    builder.PrependInt8Slot(6, homeContextCompression, 0)

def AddHomeContextCompression(builder: octoflatbuffers.Builder, homeContextCompression: int):
    SageDataContextAddHomeContextCompression(builder, homeContextCompression)

def SageDataContextAddHomeContextOriginalDataSize(builder: octoflatbuffers.Builder, homeContextOriginalDataSize: int):
    builder.PrependUint32Slot(7, homeContextOriginalDataSize, 0)

def AddHomeContextOriginalDataSize(builder: octoflatbuffers.Builder, homeContextOriginalDataSize: int):
    SageDataContextAddHomeContextOriginalDataSize(builder, homeContextOriginalDataSize)

def SageDataContextAddStates(builder: octoflatbuffers.Builder, states: int):
    builder.PrependUOffsetTRelativeSlot(8, octoflatbuffers.number_types.UOffsetTFlags.py_type(states), 0)

def AddStates(builder: octoflatbuffers.Builder, states: int):
    SageDataContextAddStates(builder, states)

def SageDataContextStartStatesVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartStatesVector(builder, numElems: int) -> int:
    return SageDataContextStartStatesVector(builder, numElems)

def SageDataContextAddStatesCompression(builder: octoflatbuffers.Builder, statesCompression: int):
    builder.PrependInt8Slot(9, statesCompression, 0)

def AddStatesCompression(builder: octoflatbuffers.Builder, statesCompression: int):
    SageDataContextAddStatesCompression(builder, statesCompression)

def SageDataContextAddStatesOriginalDataSize(builder: octoflatbuffers.Builder, statesOriginalDataSize: int):
    builder.PrependUint32Slot(10, statesOriginalDataSize, 0)

def AddStatesOriginalDataSize(builder: octoflatbuffers.Builder, statesOriginalDataSize: int):
    SageDataContextAddStatesOriginalDataSize(builder, statesOriginalDataSize)

def SageDataContextAddLiveContext(builder: octoflatbuffers.Builder, liveContext: int):
    builder.PrependUOffsetTRelativeSlot(11, octoflatbuffers.number_types.UOffsetTFlags.py_type(liveContext), 0)

def AddLiveContext(builder: octoflatbuffers.Builder, liveContext: int):
    SageDataContextAddLiveContext(builder, liveContext)

def SageDataContextStartLiveContextVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartLiveContextVector(builder, numElems: int) -> int:
    return SageDataContextStartLiveContextVector(builder, numElems)

def SageDataContextAddLiveContextCompression(builder: octoflatbuffers.Builder, liveContextCompression: int):
    builder.PrependInt8Slot(12, liveContextCompression, 0)

def AddLiveContextCompression(builder: octoflatbuffers.Builder, liveContextCompression: int):
    SageDataContextAddLiveContextCompression(builder, liveContextCompression)

def SageDataContextAddLiveContextOriginalDataSize(builder: octoflatbuffers.Builder, liveContextOriginalDataSize: int):
    builder.PrependUint32Slot(13, liveContextOriginalDataSize, 0)

def AddLiveContextOriginalDataSize(builder: octoflatbuffers.Builder, liveContextOriginalDataSize: int):
    SageDataContextAddLiveContextOriginalDataSize(builder, liveContextOriginalDataSize)

def SageDataContextEnd(builder: octoflatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: octoflatbuffers.Builder) -> int:
    return SageDataContextEnd(builder)
